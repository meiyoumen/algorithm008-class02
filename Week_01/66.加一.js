//给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
//
// 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
//
// 你可以假设除了整数 0 之外，这个整数不会以零开头。
//
// 示例 1:
//
// 输入: [1,2,3]
//输出: [1,2,4]
//解释: 输入数组表示数字 123。
//
//
// 示例 2:
//
// 输入: [4,3,2,1]
//输出: [4,3,2,2]
//解释: 输入数组表示数字 4321。
//
// Related Topics 数组

/**
 *  抛开该代码来回的类型转换不说，其最大的问题就是js的精度问题。当数字超过 2^{53} 时，js的计算就会失真。
 *  我们就只有遍历数组了，倒序遍历数组，
 *  判断该位是否为9，如果不为9，将该位加1，然后结束迭代，返回结果即可；
 *  如果该位为9，将该位置0，并判断上一位是否为9，重复该操作即可。
 *  这里要注意，在结束迭代之后，如果数组首位为0，这时应该在数组开头加上1，比如输入[9,9,9]就应返回[1,0,0,0]。
 */


/**
 * @param {number[]} digits
 * @return {number[]}
 */
var plusOne = function(digits) {
  for (let i = digits.length -1; i >= 0; i--) {
    // 判断该位置是为9, 如果不是 加1 返回该数组， 否则改位置位0, 继续循环下一位会继续判断是否能加1
    if (digits[i] !==  9) {
      digits[i] += 1
      return digits
    }
    // [1,7,8,9] => [1, 8, 9, 0]
    // 置为0后继续循环
    digits[i] = 0
  }

  // 循环条件结束没有返回，则全都是0了 要补0
  // [9,9,9] => [1,0,0,0]
  // 在数组前插入1
  digits.unshift(1)
  return digits
};
console.log(plusOne([1,2,3]))

/**
 * ES6
 * @param strs
 * @returns {string[]}
 */
let plusOne2 = function (strs) {
  // [1,2,3] => 123 + 1
  let num = Number(strs.join("")) + 1

  // 124 => ['1', '2', '4'] => [1,2,4]
  return [...num.toString()].map(it => +it)
}

console.log(plusOne2([1,2,3]))




